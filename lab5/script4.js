const productCatalog = new Map();
const productHistory = new WeakMap();
let productIdCounter = 1;

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
function updateTable() {
    const tbody = document.querySelector("#productTable tbody");
    tbody.innerHTML = "";

    for (let [id, product] of productCatalog.entries()) {
        const row = document.createElement("tr");
        row.innerHTML = `
      <td>${id}</td>
      <td>${product.name}</td>
      <td>${product.price}</td>
      <td>${product.quantity}</td>
      <td>
        <button onclick="removeProduct(${id})">‚ùå</button>
        <button onclick="placeOrder(${id})">üõí</button>
      </td>
    `;
        tbody.appendChild(row);
    }
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É –∑ UI
function addProductUI() {
    const name = document.getElementById("name").value.trim();
    const price = parseFloat(document.getElementById("price").value);
    const quantity = parseInt(document.getElementById("quantity").value);

    if (!name || isNaN(price) || isNaN(quantity)) return alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ!");

    const product = { id: productIdCounter++, name, price, quantity };
    productCatalog.set(product.id, product);
    productHistory.set(product, [`–°—Ç–≤–æ—Ä–µ–Ω–æ: ${new Date().toLocaleString()}`]);
    updateTable();

    document.getElementById("name").value = "";
    document.getElementById("price").value = "";
    document.getElementById("quantity").value = "";
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—É
function removeProduct(id) {
    productCatalog.delete(id);
    updateTable();
}

// –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è (—ñ–º—ñ—Ç–∞—Ü—ñ—è)
function placeOrder(id) {
    const product = productCatalog.get(id);
    if (!product || product.quantity <= 0) {
        alert("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
        return;
    }
    product.quantity--;
    const history = productHistory.get(product);
    history.push(`–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: -1 (${new Date().toLocaleString()})`);
    updateTable();
}

// –ü–æ—à—É–∫ –ø—Ä–æ–¥—É–∫—Ç—É
function searchProductUI() {
    const name = document.getElementById("searchName").value.trim().toLowerCase();
    let found = false;
    for (let product of productCatalog.values()) {
        if (product.name.toLowerCase() === name) {
            document.getElementById("searchResult").innerText =
                ` –ó–Ω–∞–π–¥–µ–Ω–æ: ${product.name}, –¶—ñ–Ω–∞: ${product.price}, –ö—ñ–ª—å–∫—ñ—Å—Ç—å: ${product.quantity}`;
            found = true;
            break;
        }
    }
    if (!found) {
        document.getElementById("searchResult").innerText = " –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";
    }
}

updateTable(); // –ü–æ—á–∞—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
